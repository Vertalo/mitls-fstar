(* This file is transitional. It gathers all manual calls to the
   LowParse combinators (beyond LowParse.*.Base) so that they can be
   extracted with cross-module inlining enabled for this file but not
   its clients, until cross-module inlining issues UNrelated to
   parsing are fixed.

   As stated in Makefile.common, for now, only Parsers.* and Format.*
   should explicitly call non-base LowParse combinators. Thus, this
   file should *only* depend on Parsers.* and Format.*
   
*)

module Parsers.Misc

module B = FStar.Bytes
module L = FStar.List.Tot
module LP = LowParse.SLow
module PCS = Parsers.CipherSuite

// TODO: replace with the corresponding clientHello serializer generated by QD
let cipherSuitesVLBytes
  (l: list PCS.cipherSuite { let len = L.length l in 1 <= len /\ len <= 255 } )
: Tot (b: B.bytes { B.length b <= 512 } ) =
  LP.serialize32_vlarray 2 510 #_ #_ #_
    #PCS.cipherSuite_serializer PCS.cipherSuite_serializer32 1 255 () l

let parseVLCipherSuites (b: B.bytes) : Tot (option ((l: list PCS.cipherSuite { 1 <= L.length l /\ L.length l <= 255 } ) * B.bytes)) =
  match
    LP.parse32_vlarray 2 2ul 510 510ul
      PCS.cipherSuite_serializer PCS.cipherSuite_parser32 1 255 () b
  with
  | Some (l, consumed) ->
    let rem = B.slice b consumed (B.len b) in
    Some (l, rem)
  | None -> None
