HACL_HOME       ?= ../../../hacl-star
FSTAR_HOME      ?= ../../../FStar
MITLS_HOME      ?= ../..
KREMLIN_HOME    ?= ../../../kremlin
MLCRYPTO_HOME   ?= ../../../MLCrypto
EVERCRYPT_HOME	?= $(HACL_HOME)/providers
ifndef LOWPARSE_HOME
  ifdef QD_HOME
    LOWPARSE_HOME=$(QD_HOME)/src/lowparse
  else
    LOWPARSE_HOME=../../../quackyducky/src/lowparse
  endif
endif
FLAVOR          ?= Kremlin

SHELL=/bin/bash

include $(HACL_HOME)/Makefile.include

# Paths and Commands

INCLUDE_PATHS = \
  $(ALL_HACL_DIRS) \
  $(KREMLIN_HOME)/include \
  $(KREMLIN_HOME)/kremlib/compat \
  $(KREMLIN_HOME)/kremlib \
  $(MITLS_HOME)/libs/ffi \
  $(LOWPARSE_HOME) \
  $(MITLS_HOME)/src/parsers/generated \
  $(EVERCRYPT_HOME)/evercrypt \
  $(EVERCRYPT_HOME)/evercrypt/fst \
  $(EVERCRYPT_HOME)/evercrypt/config/$(EVERCRYPT_CONFIG) \
  $(SPECINC)

ifeq (,$(MITLS_NODEBUG))
  INCLUDE_PATHS += ./concrete-flags/Debug
else
  INCLUDE_PATHS += ./concrete-flags/NoDebug
endif


PARSERS_CACHE_DIR=$(MITLS_HOME)/src/parsers/generated/cache
ifneq (,$(wildcard $(PARSERS_CACHE_DIR)))
  INCLUDE_PATHS += $(PARSERS_CACHE_DIR)
endif

HINTS_DIR  ?= hints
CACHE_DIR   = cache/$(FLAVOR)
EXTRACT_DIR = extract/$(FLAVOR)
DEP_FILE    = $(CACHE_DIR)/.depend
FSTAR       = $(FSTAR_HOME)/bin/fstar.exe --cache_dir $(CACHE_DIR) --cache_checked_modules $(OTHERFLAGS)
VFLAGS     ?= --warn_error -272-241

ifneq (,$(HINTS_DIR))
	HINTS_OPTS=--hint_file $(HINTS_DIR)/$(notdir $(subst .checked,,$<)).hints
endif

# Project Files

# Add more roots here!
ROOTS ?= QUIC.fst Test.Main.fst \
  HSL.Common.fst HSL.Send.fsti HSL.Receive.fst \
  IV.fst HMAC.UFCMA.fst Token.UF1CMA.fst Pkg.Tree.fst AEAD.Pkg.fst \
  HSL.Transcript.fst

EVERYTHING=$(wildcard *.fst *.fsti Make* $(MITLS_HOME)/src/pki/* $(MITLS_HOME)/libs/ffi/* ideal-flags/* concrete-flags/* concrete-flags/$(FLAVOR)/*)

# Production Rules

$(DEP_FILE): # $(EVERYTHING)
ifdef VERBOSE
	@echo -e "\033[1;33m=== Computing $(FLAVOR) dependencies ...\033[;37m"
endif
	@mkdir -p $(EXTRACT_DIR)
	@mkdir -p $(CACHE_DIR)
ifneq (,$(HINTS_DIR))
	@mkdir -p $(HINTS_DIR)
endif
	$(subst \\,, \
		$(FSTAR) --cache_dir $(CACHE_DIR) --odir $(EXTRACT_DIR) --extract $(EXTRACT) \
			--dep full \
			$(VFLAGS) \
			$(addprefix --include , $(INCLUDE_PATHS)) \
			$(ROOTS) > $(DEP_FILE) \
	)

$(DEP_FILE).dot:
ifdef VERBOSE
	@echo -e "\033[1;33m=== Computing $@ ...\033[;37m"
endif
	$(subst \\,, \
		$(FSTAR) --extract $(EXTRACT) \
			--dep graph \
			$(addprefix --include , $(INCLUDE_PATHS)) \
			$(ROOTS) > /dev/null \
	)
	mv dep.graph $@

$(DEP_FILE).pdf: $(DEP_FILE).dot
	fdp -Tpdf $< -o$@


depend: $(DEP_FILE)

-include $(DEP_FILE)

# REMARK:
# $(subst ...) turns command strings into single-line strings, so they are
# easier to read/follow.

# REMARK:
# These rules have an implicit prerequisite, coming from $(DEP_FILE),
# on the source fst/fsti file

# REMARK
# "@touch $@" is needed because make may decide to invoke fstar on this
# target because the timestamp on, say, the .fst file changed, and
# then fstar may detect that there was no change in content and not
# re-emit the .fst.checked file. Adding the touch ensures that the
# timestamp on the .checked file is updated to avoid make running this
# rule again.
# If F* doesn't write a .checked file because it hasn't verified a
# dependency, then an empty (invalid) file will be created.

# REMARK
# cwinter: The order-only dependency makes sure that F* will not run until 
# $(DEP_FILE) is regenerated. Otherwise it can happen that this rule is 
# executed in parallel with the $(DEP_FILE) rule, where this rule uses an 
# outdated $(DEP_FILE) on the disc. Alternatively, secondary expansion could
# solve this problem too. If there is an up to date $(DEP_FILE), or none at 
# all, then the dependency can be ignored. 

# can't enumerate all the already_cached namespaces: Vale doesn't work (not
# everything is under Vale) and '* -Mitls' doesn't work either. Instead, I used
# this delightful command:
# find vale -iname '*.fst' -or -iname '*.fsti' | xargs basename -a | sed 's/.fsti\?//' | sort | uniq | egrep -v '^(Vale|Interop|Words|Collections|X64|Math)' | xargs echo
VFLAGS += --warn_error @321 $(HINTS_OPTS) --cmi --already_cached 'prims Lib LowParse FStar -FStar.Old.Endianness -FStar.Test LowStar C -C.Compat Hacl EverCrypt X64 Vale Spec Interop Collections Words Math AES256_helpers AEShash_stdcalls AES_helpers AES_s AES_stdcalls Arch.BufferFriend Arch.Types Arch.TypesNative BufferViewHelpers Cpuid_stdcalls Fadd_inline Fadd_stdcalls Fast_defs FastHybrid_helpers Fast_lemmas_external Fast_lemmas_internal FastMul_helpers FastSqr_helpers FastUtil_helpers Fmul_inline Fmul_stdcalls Fsqr_inline Fsqr_stdcalls Fsub_stdcalls Fswap_inline Fswap_stdcalls GCM GCMdecrypt_stdcalls GCMencryptOpt256_stdcalls GCMencryptOpt_stdcalls GCMencrypt_stdcalls GCM_helpers GCM_s Gcm_simplify GCTR GCTR_s GF128 GF128_s GHash GHash_s Map16 Opaque_s OptPublic Poly1305.Equiv Poly1305.Spec_s Poly_stdcalls Prop_s SHA_helpers Sha_stdcalls Simplify_Sha TypesNative_s Types_s Util.Meta Views Workarounds Words_s'

%.checked: | $(DEP_FILE)
ifdef VERBOSE
	@echo -e "\033[1;35m=== Producing $@ ...\033[;37m"
endif
	$(subst \\,, \
		$(FSTAR) $(VFLAGS) \
		$(addprefix --include , $(INCLUDE_PATHS)) $< \
		)
	@touch $@

$(CACHE_DIR)/FStar.%.checked \
$(CACHE_DIR)/LowStar.%.checked \
$(CACHE_DIR)/C.%.checked \
$(CACHE_DIR)/LowParse.%.checked \
: VFLAGS = --admit_smt_queries true

$(EXTRACT_DIR)/Parsers_%.krml \
$(CACHE_DIR)/Parsers.%.checked \
: VFLAGS = --__temp_fast_implicits --admit_smt_queries true

$(CACHE_DIR)/FStar.%.checked \
$(CACHE_DIR)/LowStar.%.checked \
$(CACHE_DIR)/C.%.checked \
$(CACHE_DIR)/LowParse.%.checked \
$(CACHE_DIR)/Parsers.%.checked \
: OTHERFLAGS := $(filter-out --record_hints,$(OTHERFLAGS))



# Gave up on OCaml extraction. This is for Kremlin only
$(EXTRACT_DIR)/%.krml:
ifdef VERBOSE
	@echo -e "\033[1;32m=== Extracting $@ ...\033[;37m"
endif
	$(subst \\,, \
		$(FSTAR) $(VFLAGS) \
			--codegen Kremlin \
			--cache_dir $(CACHE_DIR) \
			$(HINTS_OPTS) \
			--odir $(EXTRACT_DIR) \
			$(addprefix --include , $(INCLUDE_PATHS)) \
			--extract_module $(basename $(notdir $(subst .checked,,$<))) \
			$(notdir $(subst .checked,,$<)) \
	)

# Avoids polluting the KreMLin source tree with a random .o file
extract/copied/%.c: $(KREMLIN_HOME)/kremlib/%.c
	mkdir -p $(dir $@)
	cp $< $@

# Don't delete these files otherwise one can't run Makefile.OCaml and
# Makefile.Kremlin in parallel
.PRECIOUS: extract/copied/%.c

# Rules for Interactive Mode
%.fst-in %.fsti-in: 
	@echo $(addprefix --include , $(INCLUDE_PATHS)) --cache_dir $(CACHE_DIR) --cache_checked_modules $(OTHERFLAGS) --hint_file $(HINTS_DIR)/$(notdir $(subst -in,,$@)).hints $(VFLAGS)
