module Negotiation.Writers.Aux2

(* TODO: all of these, along with their implementations in the .fst, should be automatically generated by QuackyDucky *)

module LWP = LowParseWriters.Parsers
module LPI = LowParse.Low.Int


val valid_synth_constr_clientHelloExtension_CHE_pre_shared_key : LWP.valid_synth_t
  (Parsers.ExtensionType.lwp_extensionType `LWP.star` Parsers.ClientHelloExtension.lwp_clientHelloExtension_CHE_pre_shared_key)
  Parsers.ClientHelloExtension.lwp_clientHelloExtension
  (fun (k, _) -> k == Parsers.ExtensionType.Pre_shared_key)
  (fun (_, ext) -> Parsers.ClientHelloExtension.CHE_pre_shared_key ext)

inline_for_extraction
noextract
let constr_clientHelloExtension_CHE_pre_shared_key
  #inv #pre #post #post_err
  ($f: (unit -> LWP.EWrite unit LWP.emp Parsers.ClientHelloExtension.lwp_clientHelloExtension_CHE_pre_shared_key pre post post_err inv))
  ()
: LWP.EWrite
    unit
    LWP.emp
    Parsers.ClientHelloExtension.lwp_clientHelloExtension
    (fun _ -> pre ())
    (fun _ _ msg ->
      pre () /\
      begin match LWP.destr_repr_spec _ _ _ _ _ _ _ f () with
      | LWP.Correct (_, pl) ->
        post () () pl /\
        msg == Parsers.ClientHelloExtension.CHE_pre_shared_key pl
      | _ -> False
      end
    )
    (fun _ ->
      pre () /\
      begin match LWP.destr_repr_spec _ _ _ _ _ _ _ f () with
      | LWP.Error _ ->
        post_err ()
      | _ -> False
      end
    )
    inv
= LWP.start Parsers.ExtensionType.lwp_extensionType Parsers.ExtensionType.extensionType_writer Parsers.ExtensionType.Pre_shared_key;
  LWP.frame _ _ _ _ _ _ _ (fun _ -> LWP.recast_writer _ _ _ _ _ _ _ f);
  LWP.valid_synth _ _ _ _ _ valid_synth_constr_clientHelloExtension_CHE_pre_shared_key
